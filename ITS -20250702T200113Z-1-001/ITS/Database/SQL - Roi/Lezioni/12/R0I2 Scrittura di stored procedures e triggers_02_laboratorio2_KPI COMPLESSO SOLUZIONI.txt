/*
***************************************************************************
***************************************************************************
1) Eseguire il seguente codice di creazione tabella:
***************************************************************************
***************************************************************************
*/
CREATE TABLE ft_kpi_valori_medi (
    id_monitoraggio SERIAL NOT NULL,
    azienda VARCHAR(255),
    tot_budget_investimenti integer,
	tot_importo_transazioni integer,
	flag_budget_superiore_alla_media boolean,
	flag_importo_superiore_alla_media boolean,
	dt_update timestamp DEFAULT now(),	
    CONSTRAINT const_ft_monit_tr_pk PRIMARY KEY (id_monitoraggio)
);



/*
***************************************************************************
***************************************************************************
2) Realizzare e testare una funzione chiamata: roi_get_somma_budget_azienda() che:
	accetti come parametro in entrata l'identificativo di una azienda e restituisca la "somma dei budget" degli investimenti per quella azienda.
	Nel caso non trovi l'azienda deve restituire 0
***************************************************************************
***************************************************************************
*/

CREATE OR REPLACE FUNCTION public.roi_get_somma_budget_azienda(par_id_azienda integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $$
/*
 Questa funzione accetta come parametro in entrata l'identificativo di una azienda e 
 restituisce la "somma dei budget" degli investimenti per quella azienda.
 Nel caso in cui non trova l'azienda restituisce: 0
*/
declare
	somma_budget integer;
begin
	
	SELECT
		sum(inv.budget) into somma_budget
	FROM
		ft_investimento as inv
	where
		inv.id_azienda = par_id_azienda
	;

	--se non trovo record forzo il valore: 0
	if somma_budget is null then
		somma_budget:=0;
	end if;

	--restituisco il risultato
	return somma_budget;
exception
	when others then 
		begin
			--se vado in errore restituisco comunque: 0
			return 0;
		end;
end; 
$$


/*
***************************************************************************
***************************************************************************
3) Realizzare e testare una funzione chiamata: roi_get_somma_importo_transazioni() che:
	accetti come parametro in entrata l'identificativo di una azienda e restituisca 
	la "somma degli importi di tutte le transazioni sui prodotti di quella azienda."
	Nel caso non trovi l'azienda deve restituire 0
***************************************************************************
***************************************************************************
*/

CREATE OR REPLACE FUNCTION public.roi_get_somma_importo_transazioni(par_id_azienda integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $$
/*
 Questa funzione accetta come parametro in entrata l'identificativo di una azienda e 
 restituisce la "somma degli importi delle transazioni riconducibili alla azienda".
 Nel caso in cui non trova l'azienda restituisce: 0
*/
declare
	somma_importo integer;
begin
	SELECT
		sum(tra.importo) into somma_importo
	FROM
		ft_transazione as tra
	inner join
		ft_prodotto as pro on
			pro.id_prodotto = tra.id_prodotto 
	where
		pro.id_azienda = par_id_azienda
	;

	--se non trovo record forzo il valore: 0
	if somma_importo is null then
		somma_importo:=0;
	end if;

	--restituisco il risultato
	return somma_importo;
exception
	when others then 
		begin
			--se vado in errore restituisco comunque: 0
			return 0;
		end;
end; 
$$


/*
***************************************************************************
***************************************************************************
4) Realizzare e testare una proceruda chiamata: roi_kpi_valori_medi() che:
	step1: cancella tutti i record della tabella: ft_kpi_valori_medi 
	step2: Cicla per ogni record della tabella: ft_azienda
		step2.1: Registra in una variabile la somma dei budget (richiamando la funzione roi_get_somma_budget_azienda)
		step2.2: Registra in una variabile la somma degli importi (richiamando la funzione roi_get_somma_importo_transazioni)
		step2.3: Inserisce un record nella tabella ft_kpi_valori_medi con i valori delle colonne:
			azienda (codice fiscale)
			tot_budget_investimenti
			tot_importo_transazioni
	step3: Cicla per ogni record della tabella ft_kpi_valori_medi
		step3.1: Registra in una variabile booleana, il valore TRUE se il totale budget è superiore alla "media di tutti i totali budget della tabella: ft_kpi_valori_medi"
		step3.2: Registra in una variabile booleana, il valore TRUE se il totale importo è superiore alla "media di tutti i totali importi della tabella: ft_kpi_valori_medi"
		step3.3: Fa l'update del record della tabella ft_kpi_valori_medi aggiungendo le informazioni registrate ai punti 4.1 e 4.2
***************************************************************************
***************************************************************************
*/

		
CREATE OR REPLACE PROCEDURE public.roi_kpi_valori_medi()
 LANGUAGE plpgsql
AS $$
/*
 Questa procedura esegue i passaggi:
	step1: cancella tutti i record della tabella: ft_kpi_valori_medi 
	step2: Cicla per ogni record della tabella: ft_azienda
		step2.1: Registra in una variabile la somma dei budget (richiamando la funzione roi_get_somma_budget_azienda)
		step2.2: Registra in una variabile la somma degli importi (richiamando la funzione roi_get_somma_importo_transazioni)
		step2.3: Inserisce un record nella tabella ft_kpi_valori_medi con i valori delle colonne:
			azienda (codice fiscale)
			tot_budget_investimenti
			tot_importo_transazioni
	step3: Cicla per ogni record della tabella ft_kpi_valori_medi
		step3.1: Registra in una variabile booleana, il valore TRUE se il totale budget è superiore alla "media di tutti i totali budget della tabella: ft_kpi_valori_medi"
		step3.2: Registra in una variabile booleana, il valore TRUE se il totale importo è superiore alla "media di tutti i totali importi della tabella: ft_kpi_valori_medi"
		step3.3: Fa l'update del record della tabella ft_kpi_valori_medi aggiungendo le informazioni registrate ai punti 4.1 e 4.2
*/
declare
	v_somma_budget numeric;
	v_somma_importi numeric;
	v_record record;
	v_flag_budget_superiore_alla_media boolean;
	v_flag_importo_superiore_alla_media boolean;
	v_avg_budget numeric;
	v_avg_importo numeric;
begin
	call scrivi_log('roi_kpi_valori_medi', '', '');
	call scrivi_log('roi_kpi_valori_medi', 'Inizio procedura: roi_kpi_valori_medi', '');

	/*
	--------------------------------------------------------------
	step1: cancella tutti i record della tabella: ft_kpi_valori_medi 
	--------------------------------------------------------------
	*/
	call scrivi_log('roi_kpi_valori_medi', '   step1: cancella tutti i record della tabella: ft_kpi_valori_medi', '');
	delete from ft_kpi_valori_medi;

	/*
	--------------------------------------------------------------
	step2: Cicla per ogni record della tabella: ft_azienda
	--------------------------------------------------------------
	*/
	call scrivi_log('roi_kpi_valori_medi', '   step2: Cicla per ogni record della tabella: ft_azienda', '');
	FOR v_record IN 
    	SELECT 
     		az.*
		FROM 
			ft_azienda as az
	loop
		/*
		--------------------------------------------------------------
		step2.1: Registra in una variabile la somma dei budget (richiamando la funzione roi_get_somma_budget_azienda) 
		--------------------------------------------------------------
		*/
		v_somma_budget := roi_get_somma_budget_azienda(v_record.id_azienda);
		call scrivi_log('roi_kpi_valori_medi', '   v_somma_budget: ' || v_somma_budget, '');

		/*
		--------------------------------------------------------------
		step2.2: Registra in una variabile la somma degli importi (richiamando la funzione roi_get_somma_importo_transazioni) 
		--------------------------------------------------------------
		*/	
		v_somma_importi := roi_get_somma_importo_transazioni(v_record.id_azienda);
		call scrivi_log('roi_kpi_valori_medi', '   v_somma_importi: ' || v_somma_importi, '');
	
		/*
		--------------------------------------------------------------
		step2.3: Inserisce un record nella tabella ft_kpi_valori_medi con i valori delle colonne:
			azienda (ragione sociale)
			tot_budget_investimenti
			tot_importo_transazioni
		--------------------------------------------------------------
		*/
		call scrivi_log('roi_kpi_valori_medi', '   inserisco il record nella tabella ft_kpi_valori_medi', '');
		insert into ft_kpi_valori_medi (azienda,tot_budget_investimenti,tot_importo_transazioni)
			values (v_record.ragione_sociale, v_somma_budget, v_somma_importi);
	
	END LOOP;

	/*recupero il valore medio dei BUDGET e lo registro nella variabile*/
	select
		avg(kpi.tot_budget_investimenti) into v_avg_budget
	from
		ft_kpi_valori_medi as kpi;
	
	/*recupero il valore medio degli IMPORTI e lo registro nella variabile*/
	select
		avg(kpi.tot_importo_transazioni) into v_avg_importo
	from
		ft_kpi_valori_medi as kpi;	
	
	/*
	--------------------------------------------------------------
	step3: Cicla per ogni record della tabella ft_kpi_valori_medi
	--------------------------------------------------------------
	*/
	FOR v_record IN 
    	SELECT 
     		kpi.*
		FROM 
			ft_kpi_valori_medi as kpi
	loop
		/*
		--------------------------------------------------------------
		step3.1: Registra in una variabile booleana, il valore TRUE se il totale budget è superiore alla "media di tutti i totali budget della tabella: ft_kpi_valori_medi"
		--------------------------------------------------------------
		*/		
		if v_record.tot_budget_investimenti > v_avg_budget then
			v_flag_budget_superiore_alla_media := true;
		else
			v_flag_budget_superiore_alla_media := false;
		end if;
	
		/*
		--------------------------------------------------------------
		step3.2: Registra in una variabile booleana, il valore TRUE se il totale importo è superiore alla "media di tutti i totali importi della tabella: ft_kpi_valori_medi"
		--------------------------------------------------------------
		*/
		if v_record.tot_importo_transazioni > v_avg_importo then
			v_flag_importo_superiore_alla_media := true;
		else
			v_flag_importo_superiore_alla_media := false;
		end if;

		/*
		--------------------------------------------------------------
		step3.3: Fa l'update del record della tabella ft_kpi_valori_medi aggiungendo le informazioni registrate ai punti 4.1 e 4.2
		--------------------------------------------------------------
		*/	
		update ft_kpi_valori_medi 
			set flag_budget_superiore_alla_media = v_flag_budget_superiore_alla_media
			,flag_importo_superiore_alla_media = v_flag_importo_superiore_alla_media 
		where azienda = v_record.azienda;
	
	END LOOP;

	call scrivi_log('roi_kpi_valori_medi', 'fine procedura: roi_kpi_valori_medi', '');
exception
	when others then 
		begin
			call scrivi_log('roi_kpi_valori_medi', 'Errore codice: '|| sqlstate || ' descrizione: ' || sqlerrm, 'ERRORE');
		end;
end; 
$$