{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1nrcHhB3pf6BoDhJCJZiUZCxyj08J5Acz","authorship_tag":"ABX9TyMFalg8k3iG0q53ZpCTRcic"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Es pokemon csv**"],"metadata":{"id":"mFuiun7W6OZ2"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"id":"hgffI8k9r0_N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716210356618,"user_tz":-120,"elapsed":15208,"user":{"displayName":"Davide Antonio Botta","userId":"01982404116963526591"}},"outputId":"25890685-a080-4e02-8b65-f12eefff2333"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","pokemon = pd.read_csv('/content/drive/MyDrive/Python - Gagliardi/Pratica/1/Pokemon.csv', sep=',' , encoding = 'latin1')\n","display(pokemon)\n","pokemon.info()"],"metadata":{"id":"7nU3NrnhUzSE","colab":{"base_uri":"https://localhost:8080/","height":771},"executionInfo":{"status":"ok","timestamp":1716211089809,"user_tz":-120,"elapsed":443,"user":{"displayName":"Davide Antonio Botta","userId":"01982404116963526591"}},"outputId":"f6baba87-fe62-447a-ce77-50040887cf13"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["      number                  name    type1   type2  total   hp  attack  \\\n","0          1             Bulbasaur    Grass  Poison    318   45      49   \n","1          2               Ivysaur    Grass  Poison    405   60      62   \n","2          3              Venusaur    Grass  Poison    525   80      82   \n","3          3         Mega Venusaur    Grass  Poison    625   80     100   \n","4          3   Gigantamax Venusaur    Grass  Poison    525   80      82   \n","...      ...                   ...      ...     ...    ...  ...     ...   \n","1067     896             Glastrier      Ice     NaN    580  100     145   \n","1068     897             Spectrier    Ghost     NaN    580  100      65   \n","1069     898               Calyrex  Psychic   Grass    500  100      80   \n","1070     898     Ice Rider Calyrex  Psychic     Ice    680  100     165   \n","1071     898  Shadow Rider Calyrex  Psychic   Ghost    680  100      85   \n","\n","      defense  sp_attack  sp_defense  speed  generation  legendary  \n","0          49         65          65     45           1      False  \n","1          63         80          80     60           1      False  \n","2          83        100         100     80           1      False  \n","3         123        122         120     80           1      False  \n","4          83        100         100     80           1      False  \n","...       ...        ...         ...    ...         ...        ...  \n","1067      130         65         110     30           8       True  \n","1068       60        145          80    130           8       True  \n","1069       80         80          80     80           8       True  \n","1070      150         85         130     50           8       True  \n","1071       80        165         100    150           8       True  \n","\n","[1072 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-c0f67217-9714-41ce-a12f-d8dd21d1efed\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>number</th>\n","      <th>name</th>\n","      <th>type1</th>\n","      <th>type2</th>\n","      <th>total</th>\n","      <th>hp</th>\n","      <th>attack</th>\n","      <th>defense</th>\n","      <th>sp_attack</th>\n","      <th>sp_defense</th>\n","      <th>speed</th>\n","      <th>generation</th>\n","      <th>legendary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Bulbasaur</td>\n","      <td>Grass</td>\n","      <td>Poison</td>\n","      <td>318</td>\n","      <td>45</td>\n","      <td>49</td>\n","      <td>49</td>\n","      <td>65</td>\n","      <td>65</td>\n","      <td>45</td>\n","      <td>1</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Ivysaur</td>\n","      <td>Grass</td>\n","      <td>Poison</td>\n","      <td>405</td>\n","      <td>60</td>\n","      <td>62</td>\n","      <td>63</td>\n","      <td>80</td>\n","      <td>80</td>\n","      <td>60</td>\n","      <td>1</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Venusaur</td>\n","      <td>Grass</td>\n","      <td>Poison</td>\n","      <td>525</td>\n","      <td>80</td>\n","      <td>82</td>\n","      <td>83</td>\n","      <td>100</td>\n","      <td>100</td>\n","      <td>80</td>\n","      <td>1</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>Mega Venusaur</td>\n","      <td>Grass</td>\n","      <td>Poison</td>\n","      <td>625</td>\n","      <td>80</td>\n","      <td>100</td>\n","      <td>123</td>\n","      <td>122</td>\n","      <td>120</td>\n","      <td>80</td>\n","      <td>1</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3</td>\n","      <td>Gigantamax Venusaur</td>\n","      <td>Grass</td>\n","      <td>Poison</td>\n","      <td>525</td>\n","      <td>80</td>\n","      <td>82</td>\n","      <td>83</td>\n","      <td>100</td>\n","      <td>100</td>\n","      <td>80</td>\n","      <td>1</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1067</th>\n","      <td>896</td>\n","      <td>Glastrier</td>\n","      <td>Ice</td>\n","      <td>NaN</td>\n","      <td>580</td>\n","      <td>100</td>\n","      <td>145</td>\n","      <td>130</td>\n","      <td>65</td>\n","      <td>110</td>\n","      <td>30</td>\n","      <td>8</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1068</th>\n","      <td>897</td>\n","      <td>Spectrier</td>\n","      <td>Ghost</td>\n","      <td>NaN</td>\n","      <td>580</td>\n","      <td>100</td>\n","      <td>65</td>\n","      <td>60</td>\n","      <td>145</td>\n","      <td>80</td>\n","      <td>130</td>\n","      <td>8</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1069</th>\n","      <td>898</td>\n","      <td>Calyrex</td>\n","      <td>Psychic</td>\n","      <td>Grass</td>\n","      <td>500</td>\n","      <td>100</td>\n","      <td>80</td>\n","      <td>80</td>\n","      <td>80</td>\n","      <td>80</td>\n","      <td>80</td>\n","      <td>8</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1070</th>\n","      <td>898</td>\n","      <td>Ice Rider Calyrex</td>\n","      <td>Psychic</td>\n","      <td>Ice</td>\n","      <td>680</td>\n","      <td>100</td>\n","      <td>165</td>\n","      <td>150</td>\n","      <td>85</td>\n","      <td>130</td>\n","      <td>50</td>\n","      <td>8</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1071</th>\n","      <td>898</td>\n","      <td>Shadow Rider Calyrex</td>\n","      <td>Psychic</td>\n","      <td>Ghost</td>\n","      <td>680</td>\n","      <td>100</td>\n","      <td>85</td>\n","      <td>80</td>\n","      <td>165</td>\n","      <td>100</td>\n","      <td>150</td>\n","      <td>8</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1072 rows Ã— 13 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0f67217-9714-41ce-a12f-d8dd21d1efed')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c0f67217-9714-41ce-a12f-d8dd21d1efed button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c0f67217-9714-41ce-a12f-d8dd21d1efed');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b3aa9735-0469-4861-aeba-9941783fa57d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3aa9735-0469-4861-aeba-9941783fa57d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b3aa9735-0469-4861-aeba-9941783fa57d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"pokemon","summary":"{\n  \"name\": \"pokemon\",\n  \"rows\": 1072,\n  \"fields\": [\n    {\n      \"column\": \"number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 267,\n        \"min\": 1,\n        \"max\": 898,\n        \"num_unique_values\": 898,\n        \"samples\": [\n          332,\n          639,\n          327\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1072,\n        \"samples\": [\n          \"Gigantamax Flapple\",\n          \"Zweilous\",\n          \"Regidrago\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Grass\",\n          \"Dragon\",\n          \"Rock\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Poison\",\n          \"Flying\",\n          \"Fairy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 121,\n        \"min\": 175,\n        \"max\": 1125,\n        \"num_unique_values\": 219,\n        \"samples\": [\n          358,\n          430,\n          436\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26,\n        \"min\": 1,\n        \"max\": 255,\n        \"num_unique_values\": 103,\n        \"samples\": [\n          52,\n          111,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"attack\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 5,\n        \"max\": 190,\n        \"num_unique_values\": 123,\n        \"samples\": [\n          90,\n          5,\n          155\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"defense\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 5,\n        \"max\": 250,\n        \"num_unique_values\": 114,\n        \"samples\": [\n          56,\n          43,\n          160\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sp_attack\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 10,\n        \"max\": 194,\n        \"num_unique_values\": 119,\n        \"samples\": [\n          91,\n          98,\n          60\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sp_defense\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27,\n        \"min\": 20,\n        \"max\": 250,\n        \"num_unique_values\": 107,\n        \"samples\": [\n          126,\n          25,\n          50\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"speed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30,\n        \"min\": 5,\n        \"max\": 200,\n        \"num_unique_values\": 127,\n        \"samples\": [\n          76,\n          117,\n          24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"generation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          6,\n          7,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"legendary\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1072 entries, 0 to 1071\n","Data columns (total 13 columns):\n"," #   Column      Non-Null Count  Dtype \n","---  ------      --------------  ----- \n"," 0   number      1072 non-null   int64 \n"," 1   name        1072 non-null   object\n"," 2   type1       1072 non-null   object\n"," 3   type2       574 non-null    object\n"," 4   total       1072 non-null   int64 \n"," 5   hp          1072 non-null   int64 \n"," 6   attack      1072 non-null   int64 \n"," 7   defense     1072 non-null   int64 \n"," 8   sp_attack   1072 non-null   int64 \n"," 9   sp_defense  1072 non-null   int64 \n"," 10  speed       1072 non-null   int64 \n"," 11  generation  1072 non-null   int64 \n"," 12  legendary   1072 non-null   bool  \n","dtypes: bool(1), int64(9), object(3)\n","memory usage: 101.7+ KB\n"]}]},{"cell_type":"code","source":["mask_1 = pokemon.iloc[0]\n","display(mask_1)"],"metadata":{"id":"qGj-tYlFr6o4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mask_2 = pokemon.drop(['name', 'type1', 'type2'], axis=1)\n","display(mask_2)"],"metadata":{"id":"CrHoE7zDs0ux"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mask_3 = pokemon.loc[[1], [\"number\", \"total\", \"hp\", \"attack\", \"defense\", \"sp_attack\", \"sp_defense\", \"speed\", \"generation\"]]\n","display(mask_3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"bU2bc2s8vRuZ","executionInfo":{"status":"ok","timestamp":1715165363776,"user_tz":-120,"elapsed":267,"user":{"displayName":"Davide Antonio Botta","userId":"01982404116963526591"}},"outputId":"02d28f91-000d-4352-8649-b27e811b5de3"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["   number  total  hp  attack  defense  sp_attack  sp_defense  speed  \\\n","1       2    405  60      62       63         80          80     60   \n","\n","   generation  \n","1           1  "],"text/html":["\n","  <div id=\"df-fe09fd9d-9fbd-418e-b9cc-b5694950b64f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>number</th>\n","      <th>total</th>\n","      <th>hp</th>\n","      <th>attack</th>\n","      <th>defense</th>\n","      <th>sp_attack</th>\n","      <th>sp_defense</th>\n","      <th>speed</th>\n","      <th>generation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>405</td>\n","      <td>60</td>\n","      <td>62</td>\n","      <td>63</td>\n","      <td>80</td>\n","      <td>80</td>\n","      <td>60</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe09fd9d-9fbd-418e-b9cc-b5694950b64f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fe09fd9d-9fbd-418e-b9cc-b5694950b64f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fe09fd9d-9fbd-418e-b9cc-b5694950b64f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mask_3","summary":"{\n  \"name\": \"mask_3\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2,\n        \"max\": 2,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 405,\n        \"max\": 405,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 60,\n        \"max\": 60,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          60\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"attack\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 62,\n        \"max\": 62,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"defense\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 63,\n        \"max\": 63,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sp_attack\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 80,\n        \"max\": 80,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sp_defense\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 80,\n        \"max\": 80,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"speed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 60,\n        \"max\": 60,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          60\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"generation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["'''\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","pokemon = pd.read_csv('/content/drive/MyDrive/Python - Gagliardi/Pratica/Pokemon.csv', sep=',' , encoding = 'latin1')\n","\n","x1 = np.array([\"hp\", \"attack\", \"defense\" ''', \"sp_attack\", \"sp_defense\", \"speed\"'''])\n","mask_a = pokemon.loc[[15], [\"hp\", \"attack\", \"defense\", \"sp_attack\", \"sp_defense\", \"speed\"]]\n","y1 = np.array(mask_a)\n","\n","\n","x2 = np.array([\"hp\", \"attack\", \"defense\", \"sp_attack\", \"sp_defense\", \"speed\"])\n","mask_b = pokemon.loc[[800], [\"hp\", \"attack\", \"defense\", \"sp_attack\", \"sp_defense\", \"speed\"]]\n","y2 = np.array(mask_b)\n","\n","#plt.bar(x1, y1,  color=\"red\", alpha=0.8, label=\"dati\")\n","\n","plt.title(\"pokestats\")\n","plt.xlabel('hp', 'attack', 'defense' ''', 'sp_attack', 'sp_defense', 'speed' ''')\n","plt.ylabel('')\n","mask_a.plot.bar() + mask_b.plot.bar()\n","\n","plt.show()\n","'''\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","# Carica il file CSV dei PokÃ©mon\n","pokemon = pd.read_csv('/content/drive/MyDrive/Python - Gagliardi/Pratica/1/Pokemon.csv')\n","\n","# Scegli due PokÃ©mon dall'utente\n","pokemon1_id = int(input(\"Inserisci il numero del primo PokÃ©mon: \"))\n","pokemon2_id = int(input(\"Inserisci il numero del secondo PokÃ©mon: \"))\n","\n","# Ottieni i dati dei due PokÃ©mon\n","pokemon1_data = pokemon.loc[pokemon1_id, [\"hp\", \"attack\", \"defense\", \"sp_attack\", \"sp_defense\", \"speed\"]]\n","pokemon2_data = pokemon.loc[pokemon2_id, [\"hp\", \"attack\", \"defense\", \"sp_attack\", \"sp_defense\", \"speed\"]]\n","\n","print(\"Il primo pokemon pronto a combattere Ã¨: \",pokemon.at[pokemon1_id, \"name\"], \"!\")\n","print(\"Il secondo pokemon pronto a combattere Ã¨: \",pokemon.at[pokemon2_id, \"name\"], \"!\")\n","\n","\n","# Creazione del grafico a barre\n","indici = np.arange(len(pokemon1_data))\n","larghezza_barre = 0.35\n","\n","fig, ax = plt.subplots()\n","barre1 = ax.bar(indici, pokemon1_data, larghezza_barre, color='r', label='PokÃ©mon 1')\n","barre2 = ax.bar(indici + larghezza_barre, pokemon2_data, larghezza_barre, color='b', label='PokÃ©mon 2')\n","'''\n","ax.set_xlabel('Statistiche')\n","ax.set_ylabel('Valore')\n","'''\n","ax.set_title('Pokestats')\n","ax.set_xticks(indici + larghezza_barre / 2)\n","ax.set_xticklabels([\"HP\", \"Attack\", \"Defense\", \"Sp. Attack\", \"Sp. Defense\", \"Speed\"])\n","ax.legend()\n","\n","plt.show()\n","\n","# Determina il vincitore confrontando la somma dei valori delle statistiche\n","somma_pokemon1 = sum(pokemon1_data)\n","somma_pokemon2 = sum(pokemon2_data)\n","\n","if somma_pokemon1 > somma_pokemon2:\n","    print(pokemon.at[pokemon1_id, \"name\"],\"VINCE!!!\")\n","elif somma_pokemon2 > somma_pokemon1:\n","    print(pokemon.at[pokemon2_id, \"name\"],\"VINCE!!!\")\n","else:\n","    print(\"Ãˆ UN PAREGGIO!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":539},"id":"5_0LYCM-wg0q","executionInfo":{"status":"ok","timestamp":1716210450853,"user_tz":-120,"elapsed":6033,"user":{"displayName":"Davide Antonio Botta","userId":"01982404116963526591"}},"outputId":"878a2ddf-62fc-4409-fcd9-7e835ba0bbd1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Inserisci il numero del primo PokÃ©mon: 1\n","Inserisci il numero del secondo PokÃ©mon: 1\n","Il primo pokemon pronto a combattere Ã¨:  Ivysaur !\n","Il secondo pokemon pronto a combattere Ã¨:  Ivysaur !\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Ãˆ UN PAREGGIO!\n"]}]}]}